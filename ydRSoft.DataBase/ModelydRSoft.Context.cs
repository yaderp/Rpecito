//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ydRSoft.DataBase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ydRSoftEntities : DbContext
    {
        public ydRSoftEntities()
            : base("name=ydRSoftEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Alma_Tipo> Alma_Tipo { get; set; }
        public virtual DbSet<Almacen> Almacen { get; set; }
        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<Cargo> Cargo { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Cliente_Credito> Cliente_Credito { get; set; }
        public virtual DbSet<Cliente_Estado> Cliente_Estado { get; set; }
        public virtual DbSet<Cliente_Pago> Cliente_Pago { get; set; }
        public virtual DbSet<Cliente_Sede> Cliente_Sede { get; set; }
        public virtual DbSet<Compra> Compra { get; set; }
        public virtual DbSet<Compra_Cuerpo> Compra_Cuerpo { get; set; }
        public virtual DbSet<Compra_Detalle> Compra_Detalle { get; set; }
        public virtual DbSet<Compra_Guia> Compra_Guia { get; set; }
        public virtual DbSet<Compra_Orden> Compra_Orden { get; set; }
        public virtual DbSet<Compra_Solicitud> Compra_Solicitud { get; set; }
        public virtual DbSet<Conexion> Conexion { get; set; }
        public virtual DbSet<Cotiza_Detalle> Cotiza_Detalle { get; set; }
        public virtual DbSet<Cotizacion> Cotizacion { get; set; }
        public virtual DbSet<Documento> Documento { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<Gasto> Gasto { get; set; }
        public virtual DbSet<Gasto_Tipo> Gasto_Tipo { get; set; }
        public virtual DbSet<Moneda> Moneda { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Receta> Receta { get; set; }
        public virtual DbSet<Sede> Sede { get; set; }
        public virtual DbSet<Serie_Numero> Serie_Numero { get; set; }
        public virtual DbSet<Venta> Venta { get; set; }
        public virtual DbSet<Venta_Cuerpo> Venta_Cuerpo { get; set; }
        public virtual DbSet<Venta_Detalle> Venta_Detalle { get; set; }
        public virtual DbSet<Venta_Guia> Venta_Guia { get; set; }
        public virtual DbSet<Venta_Orden> Venta_Orden { get; set; }
    
        public virtual int sp_Insert_Almacen(Nullable<int> idtipo, string nombre, string detalle, byte[] imagen, ObjectParameter iD)
        {
            var idtipoParameter = idtipo.HasValue ?
                new ObjectParameter("idtipo", idtipo) :
                new ObjectParameter("idtipo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var detalleParameter = detalle != null ?
                new ObjectParameter("detalle", detalle) :
                new ObjectParameter("detalle", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Almacen", idtipoParameter, nombreParameter, detalleParameter, imagenParameter, iD);
        }
    
        public virtual int sp_Insert_Cliente(string ruc, string razsoc, string direc, string pago, Nullable<int> credito, Nullable<int> estado, ObjectParameter iD)
        {
            var rucParameter = ruc != null ?
                new ObjectParameter("ruc", ruc) :
                new ObjectParameter("ruc", typeof(string));
    
            var razsocParameter = razsoc != null ?
                new ObjectParameter("razsoc", razsoc) :
                new ObjectParameter("razsoc", typeof(string));
    
            var direcParameter = direc != null ?
                new ObjectParameter("direc", direc) :
                new ObjectParameter("direc", typeof(string));
    
            var pagoParameter = pago != null ?
                new ObjectParameter("pago", pago) :
                new ObjectParameter("pago", typeof(string));
    
            var creditoParameter = credito.HasValue ?
                new ObjectParameter("credito", credito) :
                new ObjectParameter("credito", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Cliente", rucParameter, razsocParameter, direcParameter, pagoParameter, creditoParameter, estadoParameter, iD);
        }
    
        public virtual int sp_Insert_Compra(Nullable<int> idguia, Nullable<int> idsede, Nullable<int> iddoc, string serie, string numero, Nullable<System.DateTime> fecha, string idempl, Nullable<decimal> inafecta, Nullable<decimal> total, byte[] img, ObjectParameter iD)
        {
            var idguiaParameter = idguia.HasValue ?
                new ObjectParameter("idguia", idguia) :
                new ObjectParameter("idguia", typeof(int));
    
            var idsedeParameter = idsede.HasValue ?
                new ObjectParameter("idsede", idsede) :
                new ObjectParameter("idsede", typeof(int));
    
            var iddocParameter = iddoc.HasValue ?
                new ObjectParameter("iddoc", iddoc) :
                new ObjectParameter("iddoc", typeof(int));
    
            var serieParameter = serie != null ?
                new ObjectParameter("serie", serie) :
                new ObjectParameter("serie", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var idemplParameter = idempl != null ?
                new ObjectParameter("idempl", idempl) :
                new ObjectParameter("idempl", typeof(string));
    
            var inafectaParameter = inafecta.HasValue ?
                new ObjectParameter("inafecta", inafecta) :
                new ObjectParameter("inafecta", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Compra", idguiaParameter, idsedeParameter, iddocParameter, serieParameter, numeroParameter, fechaParameter, idemplParameter, inafectaParameter, totalParameter, imgParameter, iD);
        }
    
        public virtual int sp_Insert_CompraDetalle(Nullable<int> idcuerpo, Nullable<int> idalma, Nullable<decimal> cantidad, Nullable<decimal> precio, Nullable<decimal> total, ObjectParameter iD)
        {
            var idcuerpoParameter = idcuerpo.HasValue ?
                new ObjectParameter("idcuerpo", idcuerpo) :
                new ObjectParameter("idcuerpo", typeof(int));
    
            var idalmaParameter = idalma.HasValue ?
                new ObjectParameter("idalma", idalma) :
                new ObjectParameter("idalma", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(decimal));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_CompraDetalle", idcuerpoParameter, idalmaParameter, cantidadParameter, precioParameter, totalParameter, iD);
        }
    
        public virtual int sp_Insert_CompraGuia(Nullable<int> idcom, Nullable<int> idsede, string idprov, string serie, string numero, Nullable<System.DateTime> fecha, string idempl, byte[] img, ObjectParameter iD)
        {
            var idcomParameter = idcom.HasValue ?
                new ObjectParameter("idcom", idcom) :
                new ObjectParameter("idcom", typeof(int));
    
            var idsedeParameter = idsede.HasValue ?
                new ObjectParameter("idsede", idsede) :
                new ObjectParameter("idsede", typeof(int));
    
            var idprovParameter = idprov != null ?
                new ObjectParameter("idprov", idprov) :
                new ObjectParameter("idprov", typeof(string));
    
            var serieParameter = serie != null ?
                new ObjectParameter("serie", serie) :
                new ObjectParameter("serie", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var idemplParameter = idempl != null ?
                new ObjectParameter("idempl", idempl) :
                new ObjectParameter("idempl", typeof(string));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_CompraGuia", idcomParameter, idsedeParameter, idprovParameter, serieParameter, numeroParameter, fechaParameter, idemplParameter, imgParameter, iD);
        }
    
        public virtual int sp_Insert_CompraOrden(Nullable<int> idsede, string idprov, string idempl, Nullable<int> idmoneda, Nullable<decimal> cambio, ObjectParameter iD)
        {
            var idsedeParameter = idsede.HasValue ?
                new ObjectParameter("idsede", idsede) :
                new ObjectParameter("idsede", typeof(int));
    
            var idprovParameter = idprov != null ?
                new ObjectParameter("idprov", idprov) :
                new ObjectParameter("idprov", typeof(string));
    
            var idemplParameter = idempl != null ?
                new ObjectParameter("idempl", idempl) :
                new ObjectParameter("idempl", typeof(string));
    
            var idmonedaParameter = idmoneda.HasValue ?
                new ObjectParameter("idmoneda", idmoneda) :
                new ObjectParameter("idmoneda", typeof(int));
    
            var cambioParameter = cambio.HasValue ?
                new ObjectParameter("cambio", cambio) :
                new ObjectParameter("cambio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_CompraOrden", idsedeParameter, idprovParameter, idemplParameter, idmonedaParameter, cambioParameter, iD);
        }
    
        public virtual int sp_Insert_CompraSol(Nullable<int> idsede, string idempl, Nullable<int> idalma, Nullable<decimal> cantidad, ObjectParameter iD)
        {
            var idsedeParameter = idsede.HasValue ?
                new ObjectParameter("idsede", idsede) :
                new ObjectParameter("idsede", typeof(int));
    
            var idemplParameter = idempl != null ?
                new ObjectParameter("idempl", idempl) :
                new ObjectParameter("idempl", typeof(string));
    
            var idalmaParameter = idalma.HasValue ?
                new ObjectParameter("idalma", idalma) :
                new ObjectParameter("idalma", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_CompraSol", idsedeParameter, idemplParameter, idalmaParameter, cantidadParameter, iD);
        }
    
        public virtual int sp_Insert_Cotizacion(Nullable<int> idsede, string ruc, string razsoc, string idempl, ObjectParameter iD)
        {
            var idsedeParameter = idsede.HasValue ?
                new ObjectParameter("idsede", idsede) :
                new ObjectParameter("idsede", typeof(int));
    
            var rucParameter = ruc != null ?
                new ObjectParameter("ruc", ruc) :
                new ObjectParameter("ruc", typeof(string));
    
            var razsocParameter = razsoc != null ?
                new ObjectParameter("razsoc", razsoc) :
                new ObjectParameter("razsoc", typeof(string));
    
            var idemplParameter = idempl != null ?
                new ObjectParameter("idempl", idempl) :
                new ObjectParameter("idempl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Cotizacion", idsedeParameter, rucParameter, razsocParameter, idemplParameter, iD);
        }
    
        public virtual int sp_Insert_CotizaDetalle(Nullable<int> idprod, Nullable<int> idcot, Nullable<decimal> cantidad, Nullable<decimal> precio, string detalle, Nullable<decimal> total, ObjectParameter iD)
        {
            var idprodParameter = idprod.HasValue ?
                new ObjectParameter("idprod", idprod) :
                new ObjectParameter("idprod", typeof(int));
    
            var idcotParameter = idcot.HasValue ?
                new ObjectParameter("idcot", idcot) :
                new ObjectParameter("idcot", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(decimal));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var detalleParameter = detalle != null ?
                new ObjectParameter("detalle", detalle) :
                new ObjectParameter("detalle", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_CotizaDetalle", idprodParameter, idcotParameter, cantidadParameter, precioParameter, detalleParameter, totalParameter, iD);
        }
    
        public virtual int sp_Insert_Empleado(string dni, Nullable<int> idcargo, string nombres, string apellidos, string correo, byte[] clave, Nullable<int> sexo, ObjectParameter iD)
        {
            var dniParameter = dni != null ?
                new ObjectParameter("dni", dni) :
                new ObjectParameter("dni", typeof(string));
    
            var idcargoParameter = idcargo.HasValue ?
                new ObjectParameter("idcargo", idcargo) :
                new ObjectParameter("idcargo", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(byte[]));
    
            var sexoParameter = sexo.HasValue ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Empleado", dniParameter, idcargoParameter, nombresParameter, apellidosParameter, correoParameter, claveParameter, sexoParameter, iD);
        }
    
        public virtual int sp_Insert_Producto(Nullable<int> idarea, string nombres, string detalle, byte[] img, ObjectParameter iD)
        {
            var idareaParameter = idarea.HasValue ?
                new ObjectParameter("idarea", idarea) :
                new ObjectParameter("idarea", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var detalleParameter = detalle != null ?
                new ObjectParameter("detalle", detalle) :
                new ObjectParameter("detalle", typeof(string));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Producto", idareaParameter, nombresParameter, detalleParameter, imgParameter, iD);
        }
    
        public virtual int sp_Insert_Proveedor(string ruc, string razsocial, string direccion, ObjectParameter iD)
        {
            var rucParameter = ruc != null ?
                new ObjectParameter("ruc", ruc) :
                new ObjectParameter("ruc", typeof(string));
    
            var razsocialParameter = razsocial != null ?
                new ObjectParameter("razsocial", razsocial) :
                new ObjectParameter("razsocial", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Proveedor", rucParameter, razsocialParameter, direccionParameter, iD);
        }
    
        public virtual int sp_Insert_Receta(Nullable<int> idprod, Nullable<int> idAlma, Nullable<decimal> cantidad, ObjectParameter iD)
        {
            var idprodParameter = idprod.HasValue ?
                new ObjectParameter("idprod", idprod) :
                new ObjectParameter("idprod", typeof(int));
    
            var idAlmaParameter = idAlma.HasValue ?
                new ObjectParameter("idAlma", idAlma) :
                new ObjectParameter("idAlma", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Receta", idprodParameter, idAlmaParameter, cantidadParameter, iD);
        }
    
        public virtual int sp_Update_CompraSol(Nullable<int> idsol, Nullable<int> idalma, Nullable<decimal> cantidad, ObjectParameter iD)
        {
            var idsolParameter = idsol.HasValue ?
                new ObjectParameter("idsol", idsol) :
                new ObjectParameter("idsol", typeof(int));
    
            var idalmaParameter = idalma.HasValue ?
                new ObjectParameter("idalma", idalma) :
                new ObjectParameter("idalma", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_CompraSol", idsolParameter, idalmaParameter, cantidadParameter, iD);
        }
    
        public virtual int sp_Insert_Gasto(Nullable<int> idtipo, Nullable<int> iddoc, string idprov, string serie, string numero, Nullable<System.DateTime> fecha, Nullable<decimal> inafecta, Nullable<decimal> total, byte[] img, ObjectParameter iD)
        {
            var idtipoParameter = idtipo.HasValue ?
                new ObjectParameter("idtipo", idtipo) :
                new ObjectParameter("idtipo", typeof(int));
    
            var iddocParameter = iddoc.HasValue ?
                new ObjectParameter("iddoc", iddoc) :
                new ObjectParameter("iddoc", typeof(int));
    
            var idprovParameter = idprov != null ?
                new ObjectParameter("idprov", idprov) :
                new ObjectParameter("idprov", typeof(string));
    
            var serieParameter = serie != null ?
                new ObjectParameter("serie", serie) :
                new ObjectParameter("serie", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var inafectaParameter = inafecta.HasValue ?
                new ObjectParameter("inafecta", inafecta) :
                new ObjectParameter("inafecta", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Gasto", idtipoParameter, iddocParameter, idprovParameter, serieParameter, numeroParameter, fechaParameter, inafectaParameter, totalParameter, imgParameter, iD);
        }
    }
}
